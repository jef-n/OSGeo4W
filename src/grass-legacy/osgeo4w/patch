diff -ur grass-7.8.7/include/Make/Grass.make ../grass-7.8.7/include/Make/Grass.make
--- grass-7.8.7/include/Make/Grass.make	2022-02-23 17:43:59.000000000 +0100
+++ ../grass-7.8.7/include/Make/Grass.make	2022-11-12 17:06:58.478078000 +0100
@@ -101,7 +101,6 @@
 HTML2MAN = VERSION_NUMBER=$(GRASS_VERSION_NUMBER) $(GISBASE)/tools/g.html2man.py
 
 GDAL_LINK = $(USE_GDAL)
-GDAL_DYNAMIC = 1
 
 DEPFILE = depend.mk
 
@@ -236,16 +235,8 @@
 endif
 
 ifneq ($(GDAL_LINK),)
-ifneq ($(GDAL_DYNAMIC),)
-ifneq ($(MINGW),)
-RASTERDEPS += -lkernel32
-else
-RASTERDEPS += $(DLLIB)
-endif
-else
 RASTERDEPS += $(GDALLIBS)
 endif
-endif
 
 ifeq ($(OPENGL_WINDOWS),1)
 NVIZDEPS += -lgdi32
diff -ur grass-7.8.7/lib/gis/gisinit.c ../grass-7.8.7/lib/gis/gisinit.c
--- grass-7.8.7/lib/gis/gisinit.c	2022-02-23 17:43:59.000000000 +0100
+++ ../grass-7.8.7/lib/gis/gisinit.c	2022-11-12 17:06:58.481093600 +0100
@@ -49,12 +49,14 @@
 
     G_set_program_name(pgm);
 
+#ifndef WIN32
     /* verify version of GRASS headers (and anything else in include) */
     if (strcmp(version, GIS_H_VERSION) != 0)
 	G_fatal_error(_("Module built against version %s but "
 			"trying to use version %s. "
 			"You need to rebuild GRASS GIS or untangle multiple installations."),
                         version, GIS_H_VERSION);
+#endif
     
     /* Make sure location and mapset are set */
     G_location_path();
@@ -84,12 +86,14 @@
     if (initialized)
 	return;
 
+#ifndef WIN32
     /* verify version of GRASS headers (and anything else in include) */
     if (strcmp(version, GIS_H_VERSION) != 0)
 	G_fatal_error(_("Module built against version %s but "
 			"trying to use version %s. "
 			"You need to rebuild GRASS GIS or untangle multiple installations."),
                         version, GIS_H_VERSION);
+#endif
     gisinit();
 }
 
diff -ur grass-7.8.7/lib/raster/gdal.c ../grass-7.8.7/lib/raster/gdal.c
--- grass-7.8.7/lib/raster/gdal.c	2022-02-23 17:43:59.000000000 +0100
+++ ../grass-7.8.7/lib/raster/gdal.c	2022-11-12 17:06:58.484103800 +0100
@@ -28,190 +28,8 @@
 #endif
 
 #ifdef GDAL_LINK
-
-#ifdef GDAL_DYNAMIC
-# if defined(__unix) || defined(__unix__)
-#  include <dlfcn.h>
-# endif
-# ifdef _WIN32
-#  include <windows.h>
-# endif
-#endif
-
-static void CPL_STDCALL(*pGDALAllRegister) (void);
-static void CPL_STDCALL(*pGDALClose) (GDALDatasetH);
-static GDALRasterBandH CPL_STDCALL(*pGDALGetRasterBand) (GDALDatasetH, int);
-static GDALDatasetH CPL_STDCALL(*pGDALOpen) (const char *pszFilename,
-					     GDALAccess eAccess);
-static CPLErr CPL_STDCALL(*pGDALRasterIO) (GDALRasterBandH hRBand,
-					   GDALRWFlag eRWFlag, int nDSXOff,
-					   int nDSYOff, int nDSXSize,
-					   int nDSYSize, void *pBuffer,
-					   int nBXSize, int nBYSize,
-					   GDALDataType eBDataType,
-					   int nPixelSpace, int nLineSpace);
-static GDALDriverH CPL_STDCALL(*pGDALGetDriverByName) (const char *);
-static const char *CPL_STDCALL(*pGDALGetMetadataItem) (GDALMajorObjectH,
-						       const char *,
-						       const char *);
-static GDALDatasetH CPL_STDCALL(*pGDALCreate) (GDALDriverH hDriver,
-					       const char *, int, int, int,
-					       GDALDataType, char **);
-static GDALDatasetH CPL_STDCALL(*pGDALCreateCopy) (GDALDriverH, const char *,
-						   GDALDatasetH, int, char **,
-						   GDALProgressFunc, void *);
-static CPLErr CPL_STDCALL(*pGDALSetRasterNoDataValue) (GDALRasterBandH,
-						       double);
-static CPLErr CPL_STDCALL(*pGDALSetGeoTransform) (GDALDatasetH, double *);
-static CPLErr CPL_STDCALL(*pGDALSetProjection) (GDALDatasetH, const char *);
-static const char *CPL_STDCALL(*pGDALGetDriverShortName) (GDALDriverH);
-static GDALDriverH CPL_STDCALL(*pGDALGetDatasetDriver) (GDALDatasetH);
-
-#if GDAL_DYNAMIC
-# if defined(__unix) && !defined(__unix__)
-#  define __unix__ __unix
-# endif
-
-static void *library_h;
-
-static void *get_symbol(const char *name)
-{
-    void *sym;
-
-# ifdef __unix__
-    sym = dlsym(library_h, name);
-# endif
-# ifdef _WIN32
-    sym = GetProcAddress((HINSTANCE) library_h, name);
-# endif
-
-    if (!sym)
-	G_fatal_error(_("Unable to locate symbol <%s>"), name);
-
-    return sym;
-}
-
-static void try_load_library(const char *name)
-{
-# ifdef __unix__
-    library_h = dlopen(name, RTLD_NOW);
-# endif
-# ifdef _WIN32
-    library_h = LoadLibrary(name);
-# endif
-}
-
-static void load_library(void)
-{
-    static const char *const candidates[] = {
-# ifdef __unix__
-	"libgdal.so.26", /* GDAL 3.0 */
-	"libgdal.so.20",
-	"libgdal.so.1",
-	"libgdal.1.1.so",
-	"gdal.1.0.so",
-	"gdal.so.1.0",
-	"libgdal.so",
-	"libgdal1.6.0.so",
-	"libgdal1.7.0.so",
-# endif
-# ifdef _WIN32
-	"gdal303.dll",
-	"gdal302.dll",
-	"gdal301.dll",
-	"gdal300.dll",
-	"gdal204.dll",        
-	"gdal203.dll",        
-	"gdal202.dll",        
-	"gdal201.dll",
-	"gdal200.dll",
-	"gdal111.dll",
-	"gdal110.dll",
-	"gdal19.dll",
-	"gdal18.dll",
-	"gdal17.dll",
-	"gdal16.dll",
-	"gdal15.dll",
-	"gdal11.dll",
-	"gdal.1.0.dll",
-	"libgdal-1.dll",
-	"gdal.dll",
-# endif
-	NULL
-    };
-    int i;
-
-    for (i = 0; candidates[i]; i++) {
-	try_load_library(candidates[i]);
-	if (library_h) {
-	    G_debug(3, "found %s", candidates[i]);
-	    return;
-	}
-    }
-
-    G_fatal_error(_("Unable to load GDAL library"));
-}
-
-static void init_gdal(void)
-{
-    load_library();
-
-# if defined(_WIN32) && !defined(_WIN64)
-    pGDALAllRegister = get_symbol("_GDALAllRegister@0");
-    pGDALOpen = get_symbol("_GDALOpen@8");
-    pGDALClose = get_symbol("_GDALClose@4");
-    pGDALGetRasterBand = get_symbol("_GDALGetRasterBand@8");
-    pGDALRasterIO = get_symbol("_GDALRasterIO@48");
-    pGDALGetDriverByName = get_symbol("_GDALGetDriverByName@4");
-    pGDALGetMetadataItem = get_symbol("_GDALGetMetadataItem@12");
-    pGDALCreate = get_symbol("_GDALCreate@28");
-    pGDALCreateCopy = get_symbol("_GDALCreateCopy@28");
-    pGDALSetRasterNoDataValue = get_symbol("_GDALSetRasterNoDataValue@12");
-    pGDALSetGeoTransform = get_symbol("_GDALSetGeoTransform@8");
-    pGDALSetProjection = get_symbol("_GDALSetProjection@8");
-    pGDALGetDriverShortName = get_symbol("_GDALGetDriverShortName@4");
-    pGDALGetDatasetDriver = get_symbol("_GDALGetDatasetDriver@4");
-#else
-    pGDALAllRegister = get_symbol("GDALAllRegister");
-    pGDALOpen = get_symbol("GDALOpen");
-    pGDALClose = get_symbol("GDALClose");
-    pGDALGetRasterBand = get_symbol("GDALGetRasterBand");
-    pGDALRasterIO = get_symbol("GDALRasterIO");
-    pGDALGetDriverByName = get_symbol("GDALGetDriverByName");
-    pGDALGetMetadataItem = get_symbol("GDALGetMetadataItem");
-    pGDALCreate = get_symbol("GDALCreate");
-    pGDALCreateCopy = get_symbol("GDALCreateCopy");
-    pGDALSetRasterNoDataValue = get_symbol("GDALSetRasterNoDataValue");
-    pGDALSetGeoTransform = get_symbol("GDALSetGeoTransform");
-    pGDALSetProjection = get_symbol("GDALSetProjection");
-    pGDALGetDriverShortName = get_symbol("GDALGetDriverShortName");
-    pGDALGetDatasetDriver = get_symbol("GDALGetDatasetDriver");
+#include <gdal.h>
 #endif
-}
-
-#else /* GDAL_DYNAMIC */
-
-static void init_gdal(void)
-{
-    pGDALAllRegister = &GDALAllRegister;
-    pGDALOpen = &GDALOpen;
-    pGDALClose = &GDALClose;
-    pGDALGetRasterBand = &GDALGetRasterBand;
-    pGDALRasterIO = &GDALRasterIO;
-    pGDALGetDriverByName = &GDALGetDriverByName;
-    pGDALGetMetadataItem = &GDALGetMetadataItem;
-    pGDALCreate = &GDALCreate;
-    pGDALCreateCopy = &GDALCreateCopy;
-    pGDALSetRasterNoDataValue = &GDALSetRasterNoDataValue;
-    pGDALSetGeoTransform = &GDALSetGeoTransform;
-    pGDALSetProjection = &GDALSetProjection;
-    pGDALGetDriverShortName = &GDALGetDriverShortName;
-    pGDALGetDatasetDriver = &GDALGetDatasetDriver;
-}
-
-#endif /* GDAL_DYNAMIC */
-
-#endif /* GDAL_LINK */
 
 /*!
   \brief Initialization
@@ -224,10 +42,9 @@
     static int initialized;
 
     if (G_is_initialized(&initialized))
-	return;
+        return;
 
-    init_gdal();
-    (*pGDALAllRegister) ();
+    GDALAllRegister();
     G_initialize_done(&initialized);
 #endif
 }
@@ -260,42 +77,42 @@
     int hflip, vflip;
 
     if (!G_find_raster2(name, mapset))
-	return NULL;
+        return NULL;
 
     map_type = Rast_map_type(name, mapset);
     if (map_type < 0)
-	return NULL;
+        return NULL;
 
     fp = G_fopen_old_misc("cell_misc", "gdal", name, mapset);
     if (!fp)
-	return NULL;
+        return NULL;
     key_val = G_fread_key_value(fp);
     fclose(fp);
 
     if (!key_val)
-	return NULL;
+        return NULL;
 
     filename = G_find_key_value("file", key_val);
     if (!filename)
-	return NULL;
+        return NULL;
 
     p = G_find_key_value("band", key_val);
     if (!p)
-	return NULL;
+        return NULL;
     band_num = atoi(p);
     if (!band_num)
-	return NULL;
+        return NULL;
 
     p = G_find_key_value("null", key_val);
     if (!p)
-	return NULL;
+        return NULL;
     /* atof on windows can not read "nan" and returns 0 instead */
     if (strcmp(p, "none") == 0 ||
         G_strcasecmp(p, "nan") == 0 || G_strcasecmp(p, "-nan") == 0) {
-	Rast_set_d_null_value(&null_val, 1);
+        Rast_set_d_null_value(&null_val, 1);
     }
     else
-	null_val = atof(p);
+        null_val = atof(p);
 
     hflip = G_find_key_value("hflip", key_val) ? 1 : 0;
     vflip = G_find_key_value("vflip", key_val) ? 1 : 0;
@@ -303,7 +120,7 @@
 #ifdef GDAL_LINK
     p = G_find_key_value("type", key_val);
     if (!p)
-	return NULL;
+        return NULL;
     type = atoi(p);
 
     switch (type) {
@@ -312,31 +129,31 @@
     case GDT_UInt16:
     case GDT_Int32:
     case GDT_UInt32:
-	req_type = CELL_TYPE;
-	break;
+        req_type = CELL_TYPE;
+        break;
     case GDT_Float32:
-	req_type = FCELL_TYPE;
-	break;
+        req_type = FCELL_TYPE;
+        break;
     case GDT_Float64:
-	req_type = DCELL_TYPE;
-	break;
+        req_type = DCELL_TYPE;
+        break;
     default:
-	return NULL;
+        return NULL;
     }
 
     if (req_type != map_type)
-	return NULL;
+        return NULL;
 
     Rast_init_gdal();
 
-    data = (*pGDALOpen) (filename, GA_ReadOnly);
+    data = GDALOpen(filename, GA_ReadOnly);
     if (!data)
-	return NULL;
+        return NULL;
 
-    band = (*pGDALGetRasterBand) (data, band_num);
+    band = GDALGetRasterBand(data, band_num);
     if (!band) {
-	(*pGDALClose) (data);
-	return NULL;
+        GDALClose(data);
+        return NULL;
     }
 #endif
 
@@ -423,7 +240,7 @@
   \return NULL on error
 */
 struct GDAL_link *Rast_create_gdal_link(const char *name,
-					RASTER_MAP_TYPE map_type)
+                                        RASTER_MAP_TYPE map_type)
 {
 #ifdef GDAL_LINK
     char path[GPATH_MAX];
@@ -439,14 +256,14 @@
     Rast_init_gdal();
 
     if (!G_is_initialized(&st->initialized)) {
-	read_gdal_options();
-	st->projinfo = G_get_projinfo();
-	st->projunits = G_get_projunits();
-	st->projepsg = G_get_projepsg();
-	if (st->projinfo && st->projunits)
-	    st->srswkt = GPJ_grass_to_wkt2(st->projinfo, st->projunits,
-	                                   st->projepsg, 0, 0);
-	G_initialize_done(&st->initialized);
+        read_gdal_options();
+        st->projinfo = G_get_projinfo();
+        st->projunits = G_get_projunits();
+        st->projepsg = G_get_projepsg();
+        if (st->projinfo && st->projunits)
+            st->srswkt = GPJ_grass_to_wkt2(st->projinfo, st->projunits,
+                                           st->projepsg, 0, 0);
+        G_initialize_done(&st->initialized);
     }
 
     gdal = G_calloc(1, sizeof(struct GDAL_link));
@@ -459,77 +276,77 @@
 
     switch (map_type) {
     case CELL_TYPE:
-	switch (R__.nbytes) {
-	case 1:
-	    gdal->type = GDT_Byte;
-	    gdal->null_val = (DCELL) 0xFF;
-	    break;
-	case 2:
-	    gdal->type = GDT_UInt16;
-	    gdal->null_val = (DCELL) 0xFFFF;
-	    break;
-	case 3:
-	case 4:
-	    gdal->type = GDT_Int32;
-	    gdal->null_val = (DCELL) 0x80000000U;
-	    break;
-	}
-	break;
+        switch (R__.nbytes) {
+        case 1:
+            gdal->type = GDT_Byte;
+            gdal->null_val = (DCELL) 0xFF;
+            break;
+        case 2:
+            gdal->type = GDT_UInt16;
+            gdal->null_val = (DCELL) 0xFFFF;
+            break;
+        case 3:
+        case 4:
+            gdal->type = GDT_Int32;
+            gdal->null_val = (DCELL) 0x80000000U;
+            break;
+        }
+        break;
     case FCELL_TYPE:
-	gdal->type = GDT_Float32;
-	Rast_set_d_null_value(&gdal->null_val, 1);
-	break;
+        gdal->type = GDT_Float32;
+        Rast_set_d_null_value(&gdal->null_val, 1);
+        break;
     case DCELL_TYPE:
-	gdal->type = GDT_Float64;
-	Rast_set_d_null_value(&gdal->null_val, 1);
-	break;
+        gdal->type = GDT_Float64;
+        Rast_set_d_null_value(&gdal->null_val, 1);
+        break;
     default:
-	G_fatal_error(_("Invalid map type <%d>"), map_type);
-	break;
+        G_fatal_error(_("Invalid map type <%d>"), map_type);
+        break;
     }
 
-    driver = (*pGDALGetDriverByName) (st->opts.format);
+    driver = GDALGetDriverByName(st->opts.format);
     if (!driver)
-	G_fatal_error(_("Unable to get <%s> driver"), st->opts.format);
+        G_fatal_error(_("Unable to get <%s> driver"), st->opts.format);
 
     /* Does driver support GDALCreate ? */
-    if ((*pGDALGetMetadataItem) (driver, GDAL_DCAP_CREATE, NULL)) {
-	gdal->data =
-	    (*pGDALCreate)(driver, gdal->filename,
-			   R__.wr_window.cols, R__.wr_window.rows,
-			   1, gdal->type, st->opts.options);
-	if (!gdal->data)
-	    G_fatal_error(_("Unable to create <%s> dataset using <%s> driver"),
-			  name, st->opts.format);
+    if (GDALGetMetadataItem(driver, GDAL_DCAP_CREATE, NULL)) {
+        gdal->data =
+            GDALCreate(driver, gdal->filename,
+                       R__.wr_window.cols, R__.wr_window.rows,
+                       1, gdal->type, st->opts.options);
+        if (!gdal->data)
+            G_fatal_error(_("Unable to create <%s> dataset using <%s> driver"),
+                          name, st->opts.format);
     }
     /* If not - create MEM driver for intermediate dataset. 
      * Check if raster can be created at all (with GDALCreateCopy) */
-    else if ((*pGDALGetMetadataItem) (driver, GDAL_DCAP_CREATECOPY, NULL)) {
-	GDALDriverH mem_driver;
+    else if (GDALGetMetadataItem(driver, GDAL_DCAP_CREATECOPY, NULL)) {
+        GDALDriverH mem_driver;
 
-	G_message(_("Driver <%s> does not support direct writing. "
-		    "Using MEM driver for intermediate dataset."),
-		  st->opts.format);
-
-	mem_driver = (*pGDALGetDriverByName) ("MEM");
-	if (!mem_driver)
-	    G_fatal_error(_("Unable to get in-memory raster driver"));
-
-	gdal->data =
-	    (*pGDALCreate)(mem_driver, "",
-			   R__.wr_window.cols, R__.wr_window.rows,
-			   1, gdal->type, st->opts.options);
-	if (!gdal->data)
-	    G_fatal_error(_("Unable to create <%s> dataset using memory driver"),
-			  name);
+        G_message(_("Driver <%s> does not support direct writing. "
+                    "Using MEM driver for intermediate dataset."),
+                  st->opts.format);
+
+        mem_driver = GDALGetDriverByName("MEM");
+        if (!mem_driver)
+            G_fatal_error(_("Unable to get in-memory raster driver"));
+
+        gdal->data =
+            GDALCreate(mem_driver, "",
+                       R__.wr_window.cols, R__.wr_window.rows,
+                       1, gdal->type, st->opts.options);
+        if (!gdal->data)
+            G_fatal_error(_("Unable to create <%s> dataset using memory driver"),
+                          name);
     }
     else
-	G_fatal_error(_("Driver <%s> does not support creating rasters"),
-		      st->opts.format);
+        G_fatal_error(_("Driver <%s> does not support creating rasters"),
+                      st->opts.format);
 
-    gdal->band = (*pGDALGetRasterBand) (gdal->data, gdal->band_num);
+    gdal->band = GDALGetRasterBand(gdal->data, gdal->band_num);
 
-    (*pGDALSetRasterNoDataValue) (gdal->band, gdal->null_val);
+    GDALSetRasterNoDataValue(gdal->band, gdal->null_val);
 
     /* Set Geo Transform  */
     transform[0] = R__.wr_window.west;
@@ -539,16 +356,16 @@
     transform[4] = 0.0;
     transform[5] = -R__.wr_window.ns_res;
 
-    if ((*pGDALSetGeoTransform) (gdal->data, transform) >= CE_Failure)
-	G_warning(_("Unable to set geo transform"));
+    if (GDALSetGeoTransform(gdal->data, transform) >= CE_Failure)
+        G_warning(_("Unable to set geo transform"));
 
     if (st->srswkt)
-	if ((*pGDALSetProjection) (gdal->data, st->srswkt) == CE_Failure)
-	    G_warning(_("Unable to set projection"));
+        if (GDALSetProjection(gdal->data, st->srswkt) == CE_Failure)
+            G_warning(_("Unable to set projection"));
 
     fp = G_fopen_new_misc("cell_misc", "gdal", name);
     if (!fp)
-	G_fatal_error(_("Unable to create cell_misc/%s/gdal file"), name);
+        G_fatal_error(_("Unable to create cell_misc/%s/gdal file"), name);
 
     key_val = G_create_key_value();
 
@@ -564,7 +381,7 @@
     G_set_key_value("type", buf, key_val);
 
     if (G_fwrite_key_value(fp, key_val) < 0)
-	G_fatal_error(_("Error writing cell_misc/%s/gdal file"), name);
+        G_fatal_error(_("Error writing cell_misc/%s/gdal file"), name);
 
     G_free_key_value(key_val);
 
@@ -584,7 +401,7 @@
 void Rast_close_gdal_link(struct GDAL_link *gdal)
 {
 #ifdef GDAL_LINK
-    (*pGDALClose) (gdal->data);
+    GDALClose(gdal->data);
 #endif
     G_free(gdal->filename);
     G_free(gdal);
@@ -603,23 +420,23 @@
     int stat = 1;
 
 #ifdef GDAL_LINK
-    GDALDriverH src_drv = (*pGDALGetDatasetDriver) (gdal->data);
+    GDALDriverH src_drv = GDALGetDatasetDriver(gdal->data);
 
-    if (G_strcasecmp((*pGDALGetDriverShortName) (src_drv), "MEM") == 0) {
-	GDALDriverH dst_drv = (*pGDALGetDriverByName) (st->opts.format);
-	GDALDatasetH dst =
-	    (*pGDALCreateCopy) (dst_drv, gdal->filename, gdal->data, FALSE,
-				st->opts.options, NULL, NULL);
-
-	if (!dst) {
-	    G_warning(_("Unable to create output file <%s> using driver <%s>"),
-		      gdal->filename, st->opts.format);
-	    stat = -1;
-	}
-	(*pGDALClose) (dst);
+    if (G_strcasecmp(GDALGetDriverShortName(src_drv), "MEM") == 0) {
+        GDALDriverH dst_drv = GDALGetDriverByName(st->opts.format);
+        GDALDatasetH dst =
+            GDALCreateCopy(dst_drv, gdal->filename, gdal->data, FALSE,
+                           st->opts.options, NULL, NULL);
+
+        if (!dst) {
+            G_warning(_("Unable to create output file <%s> using driver <%s>"),
+                      gdal->filename, st->opts.format);
+            stat = -1;
+        }
+        GDALClose(dst);
     }
 
-    (*pGDALClose) (gdal->data);
+    GDALClose(gdal->data);
 
 #endif
     G_free(gdal->filename);
@@ -635,13 +452,13 @@
   See GDAL's RasterIO for details.
 */
 CPLErr Rast_gdal_raster_IO(GDALRasterBandH band, GDALRWFlag rw_flag,
-			   int x_off, int y_off, int x_size, int y_size,
-			   void *buffer, int buf_x_size, int buf_y_size,
-			   GDALDataType buf_type, int pixel_size,
-			   int line_size)
-{
-    return (*pGDALRasterIO) (band, rw_flag, x_off, y_off, x_size, y_size,
-			     buffer, buf_x_size, buf_y_size, buf_type,
-			     pixel_size, line_size);
+                           int x_off, int y_off, int x_size, int y_size,
+                           void *buffer, int buf_x_size, int buf_y_size,
+                           GDALDataType buf_type, int pixel_size,
+                           int line_size)
+{
+    return GDALRasterIO(band, rw_flag, x_off, y_off, x_size, y_size,
+                        buffer, buf_x_size, buf_y_size, buf_type,
+                        pixel_size, line_size);
 }
 #endif
diff -ur grass-7.8.7/lib/raster/Makefile ../grass-7.8.7/lib/raster/Makefile
--- grass-7.8.7/lib/raster/Makefile	2022-02-23 17:43:59.000000000 +0100
+++ ../grass-7.8.7/lib/raster/Makefile	2022-11-12 17:06:58.486072900 +0100
@@ -10,11 +10,6 @@
 ifneq ($(GDAL_LINK),)
 EXTRA_CFLAGS += -DGDAL_LINK=1
 EXTRA_INC += $(PROJINC) $(GDALCFLAGS)
-
-ifneq ($(GDAL_DYNAMIC),)
-EXTRA_CFLAGS += -DGDAL_DYNAMIC=1
-endif
-
 endif
 
 default: lib
diff -ur grass-7.8.7/mswindows/osgeo4w/config.h.vc ../grass-7.8.7/mswindows/osgeo4w/config.h.vc
--- grass-7.8.7/mswindows/osgeo4w/config.h.vc	2022-02-23 17:43:59.000000000 +0100
+++ ../grass-7.8.7/mswindows/osgeo4w/config.h.vc	2022-11-12 17:06:58.488074200 +0100
@@ -295,4 +295,6 @@
 /* define if langinfo.h exists */
 /* #undef HAVE_LANGINFO_H */
 
+#define HAVE_PROJ_H 1
+
 #endif /* _config_h */
diff -ur grass-7.8.7/mswindows/osgeo4w/env.bat.tmpl ../grass-7.8.7/mswindows/osgeo4w/env.bat.tmpl
--- grass-7.8.7/mswindows/osgeo4w/env.bat.tmpl	2022-02-23 17:43:59.000000000 +0100
+++ ../grass-7.8.7/mswindows/osgeo4w/env.bat.tmpl	2022-11-12 17:06:58.489791900 +0100
@@ -12,11 +12,3 @@
 set GRASS_PROJSHARE=%OSGEO4W_ROOT%\share\proj
 
 set FONTCONFIG_FILE=%GISBASE%\etc\fonts.conf
-
-REM
-REM RStudio-related
-REM
-REM set RStudio temporarily to %PATH% if it exists
-IF EXIST "%ProgramFiles%\RStudio\bin\rstudio.exe" set PATH=%PATH%;%ProgramFiles%\RStudio\bin
-REM set R_USER if %USERPROFILE%\Documents\R\ exists to catch most common cases of private R libraries
-IF EXIST "%USERPROFILE%\Documents\R\" set R_USER=%USERPROFILE%\Documents\
diff -ur grass-7.8.7/mswindows/osgeo4w/package.sh ../grass-7.8.7/mswindows/osgeo4w/package.sh
--- grass-7.8.7/mswindows/osgeo4w/package.sh	2022-02-23 17:43:59.000000000 +0100
+++ ../grass-7.8.7/mswindows/osgeo4w/package.sh	2022-11-12 17:08:32.173735200 +0100
@@ -126,6 +126,7 @@
 	/mingw64/bin/libglib-2.0-0.dll
 	/mingw64/bin/libgraphite2.dll
 	/mingw64/bin/libpcre-1.dll
+	/mingw64/bin/libpcre2-8-0.dll
 	/mingw64/bin/libstdc++-6.dll
 	/mingw64/bin/libgcc_s_seh-1.dll
 	/mingw64/bin/libfftw3-3.dll
@@ -149,13 +150,13 @@
 
 	log configure
 	./configure \
-	    --host=x86_64-w64-mingw32 \
+		--host=x86_64-w64-mingw32 \
 		--with-libs="$OSGEO4W_ROOT_MSYS/lib" \
 		--with-includes=$OSGEO4W_ROOT_MSYS/include \
-        --libexecdir=$OSGEO4W_ROOT_MSYS/bin \
-        --prefix=$OSGEO4W_ROOT_MSYS/apps/grass \
-        --bindir=$OSGEO4W_ROOT_MSYS/bin \
-        --includedir=$OSGEO4W_ROOT_MSYS/include \
+		--libexecdir=$OSGEO4W_ROOT_MSYS/bin \
+		--prefix=$OSGEO4W_ROOT_MSYS/apps/grass \
+		--bindir=$OSGEO4W_ROOT_MSYS/bin \
+		--includedir=$OSGEO4W_ROOT_MSYS/include \
 		--without-x \
 		--with-cxx \
 		--enable-shared \
@@ -178,10 +179,10 @@
 		--with-nls \
 		--with-zstd \
 		--with-odbc \
-	    --with-cairo \
+		--with-cairo \
 		--with-cairo-includes=$OSGEO4W_ROOT_MSYS/include \
 		--with-cairo-ldflags="-L$PWD/mswindows/osgeo4w/lib -lcairo -lfontconfig" \
-	    --with-opengl=windows \
+		--with-opengl=windows \
 		--with-bzlib \
 		--with-liblas=$PWD/mswindows/osgeo4w/liblas-config
 
diff -ur grass-7.8.7/mswindows/osgeo4w/postinstall.bat ../grass-7.8.7/mswindows/osgeo4w/postinstall.bat
--- grass-7.8.7/mswindows/osgeo4w/postinstall.bat	2022-02-23 17:43:59.000000000 +0100
+++ ../grass-7.8.7/mswindows/osgeo4w/postinstall.bat	2022-11-12 17:06:58.493813300 +0100
@@ -1,29 +1,31 @@
-set ICON=%OSGEO4W_ROOT%\apps\grass\grass@POSTFIX@\gui\icons\grass_osgeo.ico
-set BATCH=%OSGEO4W_ROOT%\bin\@GRASS_EXECUTABLE@.bat
-textreplace -std -t "%BATCH%"
-textreplace -std -t "%OSGEO4W_ROOT%\apps\grass\grass@POSTFIX@\etc\fontcap"
-
-for /F "tokens=* USEBACKQ" %%F IN (`getspecialfolder Documents`) do set DOCUMENTS=%%F
-
-if not %OSGEO4W_MENU_LINKS%==0 xxmklink "%OSGEO4W_STARTMENU%\GRASS GIS @VERSION@.lnk" "%BATCH%"  "--gui" "%DOCUMENTS%" "Launch GRASS GIS @VERSION@" 1 "%ICON%" 
-if not %OSGEO4W_DESKTOP_LINKS%==0 xxmklink "%OSGEO4W_DESKTOP%\GRASS GIS @VERSION@.lnk" "%BATCH%"  "--gui" "%DOCUMENTS%" "Launch GRASS GIS @VERSION@" 1 "%ICON%" 
-
-rem run g.mkfontcap outside a GRASS session during
-rem an OSGeo4W installation for updating paths to fonts
-
-rem set gisbase
-set GISBASE=%OSGEO4W_ROOT%\apps\grass\grass@POSTFIX@
-
-rem set path to freetype dll and its dependencies
-set FREETYPEBASE=%OSGEO4W_ROOT%\bin;%OSGEO4W_ROOT%\apps\msys\bin;%GISBASE%\lib
-
-rem set dependencies to path
-set PATH=%FREETYPEBASE%;%PATH%
-
-rem GISRC must be set
-set GISRC=dummy
-
-rem run g.mkfontcap outside a GRASS session
-"%GISBASE%\bin\g.mkfontcap.exe" -o
-
-del "%BATCH%.tmpl
+set ICON=%OSGEO4W_ROOT%\apps\grass\grass@POSTFIX@\gui\icons\grass_osgeo.ico
+set BATCH=%OSGEO4W_ROOT%\bin\@GRASS_EXECUTABLE@.bat
+textreplace -std -t "%BATCH%"
+textreplace -std -t "%OSGEO4W_ROOT%\apps\grass\grass@POSTFIX@\etc\fontcap"
+
+for /F "tokens=* USEBACKQ" %%F IN (`getspecialfolder Documents`) do set DOCUMENTS=%%F
+
+if not %OSGEO4W_MENU_LINKS%==0 xxmklink "%OSGEO4W_STARTMENU%\GRASS GIS @VERSION@.lnk" "%BATCH%"  "--gui" "%DOCUMENTS%" "Launch GRASS GIS @VERSION@" 1 "%ICON%" 
+if not %OSGEO4W_DESKTOP_LINKS%==0 xxmklink "%OSGEO4W_DESKTOP%\GRASS GIS @VERSION@.lnk" "%BATCH%"  "--gui" "%DOCUMENTS%" "Launch GRASS GIS @VERSION@" 1 "%ICON%" 
+
+rem run g.mkfontcap outside a GRASS session during
+rem an OSGeo4W installation for updating paths to fonts
+
+rem set gisbase
+set GISBASE=%OSGEO4W_ROOT%\apps\grass\grass@POSTFIX@
+
+rem set path to freetype dll and its dependencies
+set FREETYPEBASE=%OSGEO4W_ROOT%\bin;%OSGEO4W_ROOT%\apps\msys\bin;%GISBASE%\lib
+
+rem set dependencies to path
+set PATH=%FREETYPEBASE%;%PATH%
+
+rem GISRC must be set
+set GISRC=dummy
+
+rem run g.mkfontcap outside a GRASS session
+"%GISBASE%\bin\g.mkfontcap.exe" -o
+
+del "%BATCH%.tmpl"
+
+exit /b 0
